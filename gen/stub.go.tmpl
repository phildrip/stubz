// Code generated by github.com/phildrip/toe. DO NOT EDIT.

package {{.PackageName}}

import (
    "sync"
)

{{range $method := .Methods}}
type {{.Name}}Ret struct {
    {{range $i, $result := $method.Results -}}
        {{index $method.ResultNames $i}} {{$result}}
    {{- end}}
}

type {{.Name}}Params struct {
    {{range $i, $param := $method.Params -}}
        {{$param}}
    {{- end}}
}
{{end}}

func New{{.StubName}}() *{{.StubName}} {
    stub := &{{.StubName}}{}
    {{range .Methods}}
    stub.Stub{{.Name}}Then = &Stub{{.Name}}Then{
        stub: stub,
    }
    {{end}}
    return stub
}

type {{.StubName}} struct {
    {{range .Methods}}
    {{.Name}}Ret {{.Name}}Ret
    {{.Name}}Calls []{{.Name}}Params
    Stub{{.Name}}Then *Stub{{.Name}}Then
    {{end}}
    mut sync.Mutex
}

{{range $method := .Methods}}
// Begin {{$.StubName}}.{{$method.Name}}
func (s *{{$.StubName}}) {{$method.Name}}({{join $method.Params ", "}}) ({{join $method.Results ", "}}) {
    s.mut.Lock()
    defer s.mut.Unlock()
    s.{{$method.Name}}Calls = append(s.{{$method.Name}}Calls, {{$method.Name}}Params{
        {{- range .ParamNames}}{{.}}, {{end}}
    })

    // return all members of {{$method.Name}}Ret
    {{with $ret := printf "s.%sRet" $method.Name -}}
    return {{range $resultName := $method.ResultNames}}{{$ret}}.{{$resultName}} {{end}}
    {{- end}}
}

type Stub{{$method.Name}}Then struct {
    stub *{{$.StubName}}
}

func (s *Stub{{$method.Name}}Then) Return({{zip $method.ResultNames $method.Results "%s %s" | joinl ", "}}) {
    s.stub.{{$method.Name}}Ret = {{$method.Name}}Ret{
        {{range $resultName := .ResultNames}} {{$resultName}}: {{$resultName}}, {{end}}
    }
}

func (s *{{$.StubName}}) On{{$method.Name}}() *Stub{{$method.Name}}Then {
    return s.Stub{{$method.Name}}Then
}
// End {{$.StubName}}.{{$method.Name}}
{{end}}